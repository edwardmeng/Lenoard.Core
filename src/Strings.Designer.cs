//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lenoard.Core {
    using System;
    using System.Reflection;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
#if NetCore
                    var assembly = typeof(Strings).GetTypeInfo().Assembly;
#else
                    var assembly = typeof(Strings).Assembly;
#endif
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Lenoard.Core.Strings", assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparand is not of the correct type..
        /// </summary>
        internal static string BadComparandType {
            get {
                return ResourceManager.GetString("BadComparandType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the Parse method in the type &quot;{0}&quot; to convert string value to {0}. Please use the Parse(string input, Func&lt;string, T&gt; boundaryParser) method instead..
        /// </summary>
        internal static string CannotFindParseMethod {
            get {
                return ResourceManager.GetString("CannotFindParseMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the TryParse method in the type &quot;{0}&quot; to try to convert string value to {0}. Please use the TryParse(string input, BoundaryParser&lt;T&gt; boundaryParser, out Range&lt;T&gt; result) method instead..
        /// </summary>
        internal static string CannotFindTryParse {
            get {
                return ResourceManager.GetString("CannotFindTryParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value cannot be null or empty..
        /// </summary>
        internal static string CannotNullOrEmpty {
            get {
                return ResourceManager.GetString("CannotNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided version string is invalid..
        /// </summary>
        internal static string InvalidVersion {
            get {
                return ResourceManager.GetString("InvalidVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &quot;{0}&quot; does not implement IComparable&lt;{0}&gt; or IComparable..
        /// </summary>
        internal static string UncomparableType {
            get {
                return ResourceManager.GetString("UncomparableType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized range format..
        /// </summary>
        internal static string UnrecognizedRange {
            get {
                return ResourceManager.GetString("UnrecognizedRange", resourceCulture);
            }
        }
    }
}
